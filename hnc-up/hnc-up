#!/usr/bin/env bash
set -eo pipefail

# -----------------------------------------------------------
# Forked from Foundry.
# https://github.com/cakevm/huff-neo/tree/master/foundryup
# -----------------------------------------------------------

BASE_DIR=${XDG_CONFIG_HOME:-$HOME}
HUFF_NEO_DIR=${HUFF_NEO_DIR:-"$BASE_DIR/.huff-neo"}
HUFF_NEO_VERSIONS_DIR="$HUFF_NEO_DIR/versions"
HUFF_NEO_BIN_DIR="$HUFF_NEO_DIR/bin"

HNC_UP_JOBS=""

BINS=(hnc)

export RUSTFLAGS="${RUSTFLAGS:--C target-cpu=native}"

main() {
  need_cmd git
  need_cmd curl

  while [[ -n $1 ]]; do
    case $1 in
      --)               shift; break;;

      -r|--repo)        shift; HNC_UP_REPO=$1;;
      -b|--branch)      shift; HNC_UP_BRANCH=$1;;
      -i|--install)     shift; HNC_UP_VERSION=$1;;
      -l|--list)        shift; list;;
      -u|--use)         shift; HNC_UP_VERSION=$1; use;;
      -p|--path)        shift; HNC_UP_LOCAL_REPO=$1;;
      -P|--pr)          shift; HNC_UP_PR=$1;;
      -C|--commit)      shift; HNC_UP_COMMIT=$1;;
      -j|--jobs)        shift; HNC_UP_JOBS=$1;;
      --arch)           shift; HNC_UP_ARCH=$1;;
      --platform)       shift; HNC_UP_PLATFORM=$1;;
      -h|--help)
        usage
        exit 0
        ;;
      *)
        warn "unknown option: $1"
        usage
        exit 1
    esac; shift
  done

  CARGO_BUILD_ARGS=(--release)

  if [ -n "$HNC_UP_JOBS" ]; then
    CARGO_BUILD_ARGS+=(--jobs "$HNC_UP_JOBS")
  fi

  # Print the banner after successfully parsing args
  banner

  if [ -n "$HNC_UP_PR" ]; then
    if [ -z "$HNC_UP_BRANCH" ]; then
      HNC_UP_BRANCH="refs/pull/$HNC_UP_PR/head"
    else
      err "can't use --pr and --branch at the same time"
    fi
  fi

  # Installs Huff Neo Compiler from a local repository if --path parameter is provided
  if [[ -n "$HNC_UP_LOCAL_REPO" ]]; then
    need_cmd cargo

    # Ignore branches/versions as we do not want to modify local git state
    if [ -n "$HNC_UP_REPO" ] || [ -n "$HNC_UP_BRANCH" ] || [ -n "$HNC_UP_VERSION" ]; then
      warn "--branch, --version, and --repo arguments are ignored during local install"
    fi

    # Enter local repo and build
    say "installing from $HNC_UP_LOCAL_REPO"
    cd "$HNC_UP_LOCAL_REPO"
    ensure cargo build --bins "${CARGO_BUILD_ARGS[@]}"

    for bin in "${BINS[@]}"; do
      # Remove prior installations if they exist
      rm -f "$HUFF_NEO_BIN_DIR/$bin"
      # Symlink from local repo binaries to bin dir
      ensure ln -s "$PWD/target/release/$bin" "$HUFF_NEO_BIN_DIR/$bin"
    done

    say "done"
    exit 0
  fi

  HNC_UP_REPO=${HNC_UP_REPO:-cakevm/huff-neo}

  # Install by downloading binaries
  if [[ "$HNC_UP_REPO" == "cakevm/huff-neo" && -z "$HNC_UP_BRANCH" && -z "$HNC_UP_COMMIT" ]]; then
    # Fetch the latest release from the Huff Neo repository if no version is provided
    if [ -z "$HNC_UP_VERSION" ]; then
      HNC_UP_VERSION=$(curl https://api.github.com/repos/$HNC_UP_REPO/releases/latest -s | jq .name -r)
    fi

    HNC_UP_TAG=$HNC_UP_VERSION

    # Normalize versions (handle channels, versions without v prefix
    if [[ "$HNC_UP_VERSION" == [[:digit:]]* ]]; then
      # Add v prefix
      HNC_UP_VERSION="v${HNC_UP_VERSION}"
      HNC_UP_TAG="${HNC_UP_VERSION}"
    fi

    say "Installing Huff Neo Compiler (version ${HNC_UP_VERSION}, tag ${HNC_UP_TAG})"

    uname_s=$(uname -s)
    PLATFORM=$(tolower "${HNC_UP_PLATFORM:-$uname_s}")
    EXT="tar.gz"
    case $PLATFORM in
      linux)
        PLATFORM="unknown-linux-gnu"
        ;;
      darwin|mac*)
        PLATFORM="apple-darwin"
        ;;
      mingw*|win*)
        EXT="zip"
        PLATFORM="win32"
        ;;
      *)
        err "unsupported platform: $PLATFORM"
        ;;
    esac

    uname_m=$(uname -m)
    ARCHITECTURE=$(tolower "${HNC_UP_ARCH:-$uname_m}")
    if [ "${ARCHITECTURE}" = "x86_64" ]; then
      # Redirect stderr to /dev/null to avoid printing errors if non Rosetta.
      if [ "$(sysctl -n sysctl.proc_translated 2>/dev/null)" = "1" ]; then
        ARCHITECTURE="aarch64"
      else
        ARCHITECTURE="x86_64"
      fi
    elif [ "${ARCHITECTURE}" = "arm64" ] ||[ "${ARCHITECTURE}" = "aarch64" ] ; then
      ARCHITECTURE="aarch64"
    else
      ARCHITECTURE="x86_64"
    fi

    # Compute the URL of the release tarball in the Huff Neo repository.
    RELEASE_URL="https://github.com/${HNC_UP_REPO}/releases/download/${HNC_UP_TAG}/"
    BIN_ARCHIVE_URL="${RELEASE_URL}hnc-${HNC_UP_VERSION}-${ARCHITECTURE}-${PLATFORM}.$EXT"

    ensure mkdir -p $HUFF_NEO_VERSIONS_DIR
    # Download and extract the binaries archive
    say "downloading Huff Neo Compiler for $HNC_UP_TAG version"
    if [ "$PLATFORM" = "win32" ]; then
      tmp="$(mktemp -d 2>/dev/null || echo ".")/hnc.zip"
      ensure download "$BIN_ARCHIVE_URL" "$tmp"
      ensure unzip "$tmp" -d "$HUFF_NEO_VERSIONS_DIR/$HNC_UP_TAG"
      rm -f "$tmp"
    else
      tmp="$(mktemp -d 2>/dev/null || echo ".")/hnc.tar.gz"
      ensure download "$BIN_ARCHIVE_URL" "$tmp"
      # Make sure it's a valid tar archive.
      ensure tar tf $tmp 1> /dev/null
      ensure mkdir -p $HUFF_NEO_VERSIONS_DIR/$HNC_UP_TAG
      ensure tar -C "$HUFF_NEO_VERSIONS_DIR/$HNC_UP_TAG" -xvf $tmp
      rm -f "$tmp"
    fi

    for bin in "${BINS[@]}"; do
      bin_path="$HUFF_NEO_BIN_DIR/$bin"
      cp $HUFF_NEO_VERSIONS_DIR/$HNC_UP_TAG/$bin $bin_path

      # Print installed msg
      say "installed - $(ensure "$bin_path" --version)"

      # Check if multiple binaries with the same name are present in PATH
      which_path="$(command -v "$bin" || true)"
      if [ -n "$which_path" ] && [ "$which_path" != "$bin_path" ]; then
        warn ""
        cat 1>&2 <<EOF
There are multiple binaries with the name '$bin' present in your 'PATH'.
This may be the result of installing '$bin' using another method,
like Cargo or other package managers.
You may need to run 'rm $which_path' or move '$HUFF_NEO_BIN_DIR'
in your 'PATH' to allow the newly installed version to take precedence!

EOF
      fi
    done

    say "done!"

  # Install by cloning the repo with the provided branch/tag
  else
    need_cmd cargo
    HNC_UP_BRANCH=${HNC_UP_BRANCH:-master}
    REPO_PATH="$HUFF_NEO_DIR/$HNC_UP_REPO"

    # If repo path does not exist, grab the author from the repo, make a directory in .huff-neo, cd to it and clone.
    if [ ! -d "$REPO_PATH" ]; then
      AUTHOR="$(echo "$HNC_UP_REPO" | cut -d'/' -f1 -)"
      ensure mkdir -p "$HUFF_NEO_DIR/$AUTHOR"
      cd "$HUFF_NEO_DIR/$AUTHOR"
      ensure git clone "https://github.com/$HNC_UP_REPO"
    fi

    # Force checkout, discarding any local changes
    cd "$REPO_PATH"
    ensure git fetch origin "${HNC_UP_BRANCH}:remotes/origin/${HNC_UP_BRANCH}"
    ensure git checkout "origin/${HNC_UP_BRANCH}"

    # If set, checkout specific commit from branch
    if [ -n "$HNC_UP_COMMIT" ]; then
      say "installing at commit $HNC_UP_COMMIT"
      ensure git checkout "$HNC_UP_COMMIT"
    fi

    # Build the repo and install the binaries locally to the .huff-neo bin directory.
    ensure cargo build --bins "${CARGO_BUILD_ARGS[@]}"
    for bin in "${BINS[@]}"; do
      for try_path in target/release/$bin target/release/$bin.exe; do
        if [ -f "$try_path" ]; then
          [ -e "$HUFF_NEO_BIN_DIR/$bin" ] && warn "overwriting existing $bin in $HUFF_NEO_BIN_DIR"
          mv -f "$try_path" "$HUFF_NEO_BIN_DIR"
        fi
      done
    done

    say "done"
  fi
}

usage() {
  cat 1>&2 <<EOF
The installer for Foundry.

Update or revert to a specific Foundry version with ease.

By default, the latest stable version is installed from built binaries.

USAGE:
    hnc-up <OPTIONS>

OPTIONS:
    -h, --help      Print help information
    -i, --install   Install a specific version from built binaries
    -l, --list      List versions installed from built binaries
    -u, --use       Use a specific installed version from built binaries
    -b, --branch    Build and install a specific branch
    -P, --pr        Build and install a specific Pull Request
    -C, --commit    Build and install a specific commit
    -r, --repo      Build and install from a remote GitHub repo (uses default branch if no other options are set)
    -p, --path      Build and install a local repository
    -j, --jobs      Number of CPUs to use for building Huff Neo Compiler (default: all CPUs)
    --arch          Install a specific architecture (supports amd64 and arm64)
    --platform      Install a specific platform (supports win32, linux, and darwin)
EOF
}

list() {
  if [ -d "$HUFF_NEO_VERSIONS_DIR" ]; then
    for VERSION in $HUFF_NEO_VERSIONS_DIR/*; do
      say "${VERSION##*/}"
      for bin in "${BINS[@]}"; do
        bin_path="$VERSION/$bin"
        say "- $(ensure "$bin_path" --version)"
      done
      printf "\n"
    done
  else
    for bin in "${BINS[@]}"; do
      bin_path="$HUFF_NEO_BIN_DIR/$bin"
      say "- $(ensure "$bin_path" --version)"
    done
  fi
  exit 0
}

use() {
  [ -z "$HNC_UP_VERSION" ] && err "no version provided"
  HUFF_NEO_VERSION_DIR="$HUFF_NEO_VERSIONS_DIR/$HNC_UP_VERSION"
  if [ -d "$HUFF_NEO_VERSION_DIR" ]; then
    for bin in "${BINS[@]}"; do
      bin_path="$HUFF_NEO_BIN_DIR/$bin"
      cp $HUFF_NEO_VERSION_DIR/$bin $bin_path
      # Print usage msg
      say "use - $(ensure "$bin_path" --version)"
    done
    exit 0
  else
    err "version $HNC_UP_VERSION not installed"
  fi
}

say() {
  printf "hnc-up: %s\n" "$1"
}

warn() {
  say "warning: ${1}" >&2
}

err() {
  say "$1" >&2
  exit 1
}

tolower() {
  echo "$1" | awk '{print tolower($0)}'
}

need_cmd() {
  if ! check_cmd "$1"; then
    err "need '$1' (command not found)"
  fi
}

check_cmd() {
  command -v "$1" &>/dev/null
}

# Run a command that should never fail. If the command fails execution
# will immediately terminate with an error showing the failing command.
ensure() {
  if ! "$@"; then err "command failed: $*"; fi
}

# Downloads $1 into $2 or stdout
download() {
  if [ -n "$2" ]; then
    # output into $2
    if check_cmd curl; then
      curl -#o "$2" -L "$1"
    else
      wget --show-progress -qO "$2" "$1"
    fi
  else
    # output to stdout
    if check_cmd curl; then
      curl -#L "$1"
    else
      wget --show-progress -qO- "$1"
    fi
  fi
}

# Print the huff-neo banner
banner() {
  printf '
 _|    _|  _|    _|  _|_|_|_|  _|_|_|_|      _|      _|  _|_|_|_|    _|_|
 _|    _|  _|    _|  _|        _|            _|_|    _|  _|        _|    _|
 _|_|_|_|  _|    _|  _|_|_|    _|_|_|        _|  _|  _|  _|_|_|    _|    _|
 _|    _|  _|    _|  _|        _|            _|    _|_|  _|        _|    _|
 _|    _|    _|_|    _|        _|            _|      _|  _|_|_|_|    _|_|
'
}

main "$@"
