#!/usr/bin/env bash
set -e

# -----------------------------------------------------------
# Forked from Foundry.
# https://github.com/foundry-rs/foundry/tree/master/foundryup
# -----------------------------------------------------------

HUFF_DIR=${HUFF_DIR-"$HOME/.huff-neo"}
HUFF_BIN_DIR="$HUFF_DIR/bin"
HUFF_MAN_DIR="$HUFF_DIR/share/man/man1"

main() {
  need_cmd git
  need_cmd curl

  # Otherwise, continue with hnc-up script
  while [[ $1 ]]; do
    case $1 in
      --)               shift; break;;

      -r|--repo)        shift; HUFF_NEO_UP_REPO=$1;;
      -b|--branch)      shift; HUFF_NEO_UP_BRANCH=$1;;
      -v|--version)     shift; HUFF_NEO_UP_VERSION=$1;;
      -p|--path)        shift; HUFF_NEO_UP_LOCAL_REPO=$1;;
      -P|--pr)          shift; HUFF_NEO_UP_PR=$1;;
      -C|--commit)      shift; HUFF_NEO_UP_COMMIT=$1;;
      -h|--help)
        usage
        exit 0
        ;;
      *)
        err "internal error: unknown option '$1'\n";;
    esac; shift
  done

  if [ ! -z "$HUFF_NEO_UP_PR" ]; then
    if [ -z "$HUFF_NEO_UP_BRANCH" ]; then
      HUFF_NEO_UP_BRANCH="refs/pull/$HUFF_NEO_UP_PR/head"
    else
      err "can't use --pr and --branch at the same time"
    fi
  fi

  # Installs huff from a local repository if --path parameter is provided
  if [[ -n "$HUFF_NEO_UP_LOCAL_REPO" ]]; then
    need_cmd cargo

    # Ignore branches/versions as we do not want to modify local git state
    if [ -n "$HUFF_NEO_UP_REPO" ] || [ -n "$HUFF_NEO_UP_BRANCH" ] || [ -n "$HUFF_NEO_UP_VERSION" ]; then
      warn "--branch, --version, and --repo arguments are ignored during local install"
    fi

    # Enter local repo and build
    say "installing from $HUFF_NEO_UP_LOCAL_REPO"
    cd $HUFF_NEO_UP_LOCAL_REPO
    RUSTFLAGS="-C target-cpu=native" ensure cargo build --release # need 4 speed


    # Remove prior installations if they exist
    rm -f "$HUFF_BIN_DIR/huff-neo"

    # Symlink from local repo binaries to bin dir
    ensure ln -s "$PWD/target/release/hnc" "$HUFF_BIN_DIR/hnc"

    say "done"
    exit 0
  fi

  HUFF_NEO_UP_REPO=${HUFF_NEO_UP_REPO-cakevm/huff-neo}

  if [[ "$HUFF_NEO_UP_REPO" == "cakevm/huff-neo" && -z "$HUFF_NEO_UP_BRANCH" && -z "$HUFF_NEO_UP_COMMIT" ]]; then
    HUFF_NEO_UP_VERSION=${HUFF_NEO_UP_VERSION-nightly}
    HUFF_NEO_UP_TAG=$HUFF_NEO_UP_VERSION

    # Normalize versions (handle channels, versions without v prefix
    if [[ "$HUFF_NEO_UP_VERSION" == "nightly" ]]; then
      # Locate real nightly tag
      SHA=$(curl -sSf https://api.github.com/repos/${HUFF_NEO_UP_REPO}/git/refs/tags/nightly \
        | grep -Eo '"sha"[^,]*' \
        | grep -Eo '[^:]*$' \
        | tr -d '"' \
        | tr -d ' ')
      HUFF_NEO_UP_TAG="nightly-${SHA}"
    elif [[ "$HUFF_NEO_UP_VERSION" == nightly* ]]; then
      HUFF_NEO_UP_VERSION="nightly"
    elif [[ "$HUFF_NEO_UP_VERSION" == [[:digit:]]* ]]; then
      # Add v prefix
      HUFF_NEO_UP_VERSION="v${HUFF_NEO_UP_VERSION}"
      HUFF_NEO_UP_TAG="${HUFF_NEO_UP_VERSION}"
    fi

    say "installing hnc (version ${HUFF_NEO_UP_VERSION}, tag ${HUFF_NEO_UP_TAG})"

    PLATFORM="$(uname -s)"
    case $PLATFORM in
      Linux)
        PLATFORM="linux"
        ;;
      Darwin)
        PLATFORM="darwin"
        ;;
      *)
        err "unsupported platform: $PLATFORM"
        ;;
    esac

    ARCHITECTURE="$(uname -m)"
    if [ "${ARCHITECTURE}" = "x86_64" ]; then
      # Redirect stderr to /dev/null to avoid printing errors if non Rosetta.
      if [ "$(sysctl -n sysctl.proc_translated 2>/dev/null)" = "1" ]; then
        ARCHITECTURE="arm64" # Rosetta.
      else
        ARCHITECTURE="amd64" # Intel.
      fi
    elif [ "${ARCHITECTURE}" = "arm64" ] ||[ "${ARCHITECTURE}" = "aarch64" ] ; then
      ARCHITECTURE="arm64" # Arm.
    else
      ARCHITECTURE="amd64" # Amd.
    fi

    # Compute the URL of the release tarball in the Huff Neo repository.
    RELEASE_URL="https://github.com/${HUFF_NEO_UP_REPO}/releases/download/${HUFF_NEO_UP_TAG}/"
    BIN_TARBALL_URL="${RELEASE_URL}huff_neo_${HUFF_NEO_UP_VERSION}_${PLATFORM}_${ARCHITECTURE}.tar.gz"
    MAN_TARBALL_URL="${RELEASE_URL}huff_neo_man_${HUFF_NEO_UP_VERSION}.tar.gz"

    # Download the binaries tarball and unpack it into the .huff bin directory.
    say "downloading latest hnc"
    ensure curl -# -L $BIN_TARBALL_URL | tar -xzC $HUFF_BIN_DIR
    # Download the man tarball and unpack it into the .huff man directory.
    say "downloading manpages"
    ensure curl -# -L $MAN_TARBALL_URL | tar -xzC $HUFF_MAN_DIR
    say "installed - $($HUFF_BIN_DIR/hnc --version)"
    say "done"

    if [[ $(which hnc) =~ "cargo" ]]; then
      warn "it appears your system already has hnc installed via cargo. you may need to run 'rm $(which hnc)' to allow hnc-up to take precedence!"
    fi
  else
    need_cmd cargo
    HUFF_NEO_UP_BRANCH=${HUFF_NEO_UP_BRANCH-main}
    REPO_PATH="${HUFF_DIR}/${HUFF_NEO_UP_REPO}"

    if [ ! -d $REPO_PATH ]; then
      # Repo path did not exist, grab the author from the repo, make a directory in .huff, cd to it and clone.
      IFS="/" read -ra AUTHOR <<< "$HUFF_NEO_UP_REPO"
      ensure mkdir -p "$HUFF_DIR/$AUTHOR"
      cd "$HUFF_DIR/$AUTHOR"
      ensure git clone https://github.com/${HUFF_NEO_UP_REPO}
    fi
    # force checkout, discarding any local changes
    cd $REPO_PATH
    ensure git fetch origin ${HUFF_NEO_UP_BRANCH}:remotes/origin/${HUFF_NEO_UP_BRANCH}
    ensure git checkout origin/${HUFF_NEO_UP_BRANCH}
    # If set, checkout specific commit from branch
    if [ ! -z $HUFF_NEO_UP_COMMIT ]; then
      say "installing at commit ${HUFF_NEO_UP_COMMIT}"
      ensure git checkout ${HUFF_NEO_UP_COMMIT}
    fi
    # Build the repo and install it locally to the .huff bin directory.
    # --root appends /bin to the directory it is given, so we pass HUFF_DIR.
    RUSTFLAGS="-C target-cpu=native" ensure cargo install --path ./bin/cli --bins --locked --force --root $HUFF_DIR

    # If help2man is installed, use it to add Huff man pages.
    if command -v help2man &> /dev/null ; then
      help2man -N $HUFF_BIN_DIR/hnc > $HUFF_MAN_DIR/huff.1
    fi
    say "done"
  fi
}

usage() {
  cat 1>&2 <<EOF
The installer for Huff Neo compiler.
Update or revert to a specific Huff version with ease.
USAGE:
    hnc-up <OPTIONS>
OPTIONS:
    -h, --help      Print help information
    -v, --version   Install a specific version
    -b, --branch    Install a specific branch
    -P, --pr        Install a specific Pull Request
    -C, --commit    Install a specific commit
    -r, --repo      Install from a remote GitHub repo (uses default branch if no other options are set)
    -p, --path      Install a local repository
EOF
}

say() {
  printf 'hnc-up: %s\n' "$1"
}

warn() {
  say "warning: ${1}" >&2
}

err() {
  say "$1" >&2
  exit 1
}

need_cmd() {
  if ! check_cmd "$1"; then
    err "need '$1' (command not found)"
  fi
}

check_cmd() {
  command -v "$1" > /dev/null 2>&1
}

# Run a command that should never fail. If the command fails execution
# will immediately terminate with an error showing the failing
# command.
ensure() {
  if ! "$@"; then err "command failed: $*"; fi
}

main "$@" || exit 1
